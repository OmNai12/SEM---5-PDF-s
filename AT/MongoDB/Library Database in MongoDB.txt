// show databases
show dbs

// show active database
db

show collections

show users

show roles

// create/use a database 'lib_db'
use lib_db

// create a collection 'books' in the current(active) database
db.createCollection('books')

// If collection 'books' doesn't exist, it will be created automatically.
// Collection.insert() is deprecated.
db.books.insert({id:1, title: 'Web Development', author: 'MDN', price: 500})
or
db.books.insertOne({id:1, title: 'Web Development', author: 'MDN', price: 500})

db.books.insertMany([	{id:2, title: 'Learn Angular', author: 'angular.io', price: 600},
						{id:3, title: 'Learn NodeJS', author: 'Nodejs.org', price: 400},
						{id:4, title: 'Learn MongoDB', author: 'MongoDB.com', price: 700}
					])

db.books.insertOne({id:5, title: 'test', author: 'test', price: 100})

db.books.deleteOne({id:4})

db.books.insert({id:4, title: 'Learn MongoDB', author: 'MongoDB.com', price: 700})

db.books.deleteMany({id:4})

// Remove all documents ????
db.books.remove({})

// Retreive all the documents from the 'books' collection
db.books.find()

db.books.find().count()

db.books.find().skip(2)

db.books.find().limit(2)

db.books.find().skip(2).limit(1)

// Return all the documents with all the fields but _id
db.books.find({}, {_id:false})
or
db.books.find({}, {_id:0} )

db.books.find({}, {_id:true} )
or
db.books.find({}, {_id:1} )
or
db.books.find({}, {_id:<non zero value>} )

db.books.find({}, {_id:false, id:true, title:true})

db.books.find({}, {_id:false, id:true, title:true, author:true, price:true, year:true})

db.books.find({}, {_id:0, id:1, title:1, author:1, price:1, year:1})

db.books.find().pretty()

// ascending
db.books.find().sort({id:1})

// descending
db.books.find().sort( {id : -1} )

db.books.find().sort( {price : 1} )

db.books.find({},{title:true, id:true})

db.books.find({},{title:true, id:true, _id:false})

db.books.find({id : {$gt: 1} })

db.books.find({id : {$gt: 1} }, {_id:0})

db.books.find({id : {$gt: 1, $lt:4} }, {_id:0})

db.books.find( {id:{$gt: 0}, price:{$lt: 600} })

db.books.find( {id:{$gt: 0}, price:{$lt: 600} }, {_id:0}).pretty()

db.books.find( {id:{$gt: 0}, price:{$lt: 600} })

db.books.find( {$or: [{id:3}, {author: 'MDN'}]} )
db.books.find( {$or: [{id:3}, {author: 'MDN'}]} , {_id:0}).pretty()

db.books.findOne({id : {$gt: 1} })

// GT, GTE, LT, LTE, EQ, NE, IN, NIN
db.books.find({id : {$in: [2, 3]} })

db.books.find({id : {$nin: [2, 3]} })

// OR, AND, NOT, NOR
db.books.find( {$or: [{id: 3}, {author: 'MDN'}] })

db.books.find( { id: {$not: {$eq: 1} } })

// Patterns
db.books.find({ title: /Angular/})

// Regex, ignore case 
db.books.find({ title: {$regex: 'ANGULAR', $options: '$i'}})
or
// In mongosh.exe (newer version)
db.books.find({ title: {$regex: 'ANGULAR', $options: 'i'}})

db.books.find({year : {$exists: true}}).pretty()

// update will update only the first matching record (used without 'multi' option)
// updation of partial record is possible
// update is now deprecated, use updateOne or updateMany
db.books.update({id: {$gt: 2}},{$set: {price: 750}})

// update multiple matching records
db.books.update({id: {$gt: 2}},{$set: {price: 750}}, {multi: true})

db.books.updateOne({id:4},{$set: {price: 750}})

db.books.updateMany({id: {$gt: 2}},{$set: {price: 750}})

// insert field
db.books.updateOne({id:4},{$set: {year: 2017}})

// remove field
db.books.updateOne({id:4},{$unset: {year: ''}})

// update if specified price is less than the current price
db.books.updateOne({id:4},{$min: {price: 700}})

// update if specified price is less than the current price
db.books.updateOne({id:4},{$min: {price: 700}})

// replace the entire document
db.books.replaceOne( {id:5}, {id:5, title: 'HTML', author: 'Mozilla', price: 350} )

// drop collection 'books'
db.books.drop()
